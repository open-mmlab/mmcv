version: 2.1

# the default pipeline parameters, which will be updated according to
# the results of the path-filtering orb
parameters:
  lint_only:
    type: boolean
    default: true

jobs:
  lint:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - run:
          name: Install pre-commit hook
          command: |
            pip install pre-commit
            pre-commit install
      - run:
          name: Linting
          command: pre-commit run --all-files

  # build_without_torch:
  #   parameters:
  #     # The python version must match available image tags in
  #     # https://circleci.com/developer/images/image/cimg/python
  #     python:
  #       type: string
  #       default: "3.7.4"
  #   docker:
  #     - image: cimg/python:<< parameters.python >>
  #   resource_class: large
  #   steps:
  #     - checkout
  #     - run:
  #         name: Upgrade pip
  #         command: |
  #           pip install pip --upgrade
  #           pip --version
  #     - run:
  #         name: Build MMEngine from source
  #         command: pip install -e . -v
  #     - run:
  #         name: Install unit tests dependencies
  #         command: pip install -r requirements/tests.txt
  #     - run:
  #         name: Run unit tests
  #         command: pytest tests/test_config tests/test_registry tests/test_fileio tests/test_logging tests/test_utils --ignore=tests/test_utils/test_dl_utils

  # build_without_ops:
  #   parameters:
  #     # The python version must match available image tags in
  #     # https://circleci.com/developer/images/image/cimg/python
  #     python:
  #       type: string
  #       default: "3.7.4"
  #   docker:
  #     - image: cimg/python:<< parameters.python >>
  #   resource_class: large
  #   steps:
  #     - checkout
  #     - run:
  #         name: Upgrade pip
  #         command: |
  #           pip install pip --upgrade
  #           pip --version
  #     - run:
  #         name: Build MMEngine from source
  #         command: pip install -e . -v
  #     - run:
  #         name: Install unit tests dependencies
  #         command: pip install -r requirements/test.txt
  #     - run:
  #         name: Run unit tests
  #         command: pytest tests/test_config tests/test_registry tests/test_fileio tests/test_logging tests/test_utils --ignore=tests/test_utils/test_dl_utils

  build_cpu:
    parameters:
      # The python version must match available image tags in
      # https://circleci.com/developer/images/image/cimg/python
      python:
        type: string
      torch:
        type: string
      torchvision:
        type: string
    docker:
      - image: cimg/python:<< parameters.python >>
    resource_class: large
    steps:
      - checkout
      - run:
          name: Install Libraries
          command: |
            sudo apt-get update
            sudo apt-get install -y ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 libgl1-mesa-glx libjpeg-dev zlib1g-dev libtinfo-dev libncurses5 ffmpeg libturbojpeg
      - run:
          name: Configure Python & pip
          command: |
            pip install --upgrade pip
            pip install wheel
      - run:
          name: Install PyTorch
          command: pip install torch==<< parameters.torch >>+cpu torchvision==<< parameters.torchvision >>+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - run:
          name: Install ninja to speed the compilation
          command: pip install ninja
      - run:
          name: Create sdist and untar
          command: |
            python setup.py sdist
            tar zxvf dist/mmcv* -C /tmp
            rm -r mmcv
      - run:
          name: Build and install from sdist
          command: |
            pushd /tmp/mmcv*
            pip install -e . -v
            popd
      - run:
          name: Install unit tests dependencies
          command: pip install -r requirements/test.txt
      - run:
          name: Run unittests
          command: |
            coverage run --branch --source mmcv -m pytest tests/
            coverage xml
            coverage report -m

  # build_cuda:
  #   parameters:
  #     torch:
  #       type: string
  #     cuda:
  #       type: enum
  #       enum: ["10.1", "10.2", "11.1"]
  #     cudnn:
  #       type: integer
  #       default: 7
  #   machine:
  #     image: ubuntu-2004-cuda-11.4:202110-01
  #     docker_layer_caching: true
  #   resource_class: gpu.nvidia.small
  #   steps:
  #     - checkout
  #     - run:
  #         name: Build Docker image
  #         command: |
  #           docker build .circleci/docker -t mmengine:gpu --build-arg PYTORCH=<< parameters.torch >> --build-arg CUDA=<< parameters.cuda >> --build-arg CUDNN=<< parameters.cudnn >>
  #           docker run --gpus all -t -d -v /home/circleci/project:/mmengine -w /mmengine --name mmengine mmengine:gpu
  #     - run:
  #         name: Build MMEngine from source
  #         command: |
  #           docker exec mmengine pip install -e . -v
  #     - run:
  #         name: Install unit tests dependencies
  #         command: |
  #           docker exec mmengine pip install -r requirements/tests.txt
  #           docker exec mmengine pip install openmim
  #           docker exec mmengine mim install 'mmcv>=2.0.0rc1'
  #     - run:
  #         name: Run unittests
  #         command: |
  #           docker exec mmengine python -m pytest tests/

workflows:
  pr_stage_lint:
    when: << pipeline.parameters.lint_only >>
    jobs:
      - lint:
          name: lint
          filters:
            branches:
              ignore:
                - main
  pr_stage_test:
    when:
      not:
        << pipeline.parameters.lint_only >>
    jobs:
      - lint:
          name: lint
          filters:
            branches:
              ignore:
                - main
      # - build_without_torch:
      #     name: build without torch
      #     requires:
      #       - lint
      - build_cpu:
          name: minimum_version_cpu
          torch: 1.6.0
          torchvision: 0.7.0
          python: 3.6.9  # The lowest python 3.6.x version available on CircleCI images
          requires:
            - lint
      - build_cpu:
          name: maximum_version_cpu
          torch: 1.12.1
          torchvision: 0.13.1
          python: 3.9.0
          requires:
            - minimum_version_cpu
      # - hold:
      #     type: approval
      #     requires:
      #       - maximum_version_cpu
      # - build_cuda:
      #     name: mainstream_version_gpu
      #     torch: 1.8.1
      #     # Use double quotation mark to explicitly specify its type
      #     # as string instead of number
      #     cuda: "10.2"
      #     requires:
      #       - hold
  # merge_stage_test:
  #   when:
  #     not:
  #       << pipeline.parameters.lint_only >>
  #   jobs:
  #     - build_cuda:
  #         name: minimum_version_gpu
  #         torch: 1.6.0
  #         # Use double quotation mark to explicitly specify its type
  #         # as string instead of number
  #         cuda: "10.1"
  #         filters:
  #           branches:
  #             only:
  #               - main
