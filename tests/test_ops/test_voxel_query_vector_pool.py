# Copyright (c) OpenMMLab. All rights reserved.
import pytest
import torch

from mmcv.ops import vector_pool_with_voxel_query


@pytest.mark.skipif(
    not torch.cuda.is_available(), reason='requires CUDA support')
def test_vector_pool_with_voxel_query():
    support_xyz = torch.tensor(
        [[1.1415, 2.0915, 1.8730], [1.0566, 0.2221, 0.5461],
         [0.8874, 0.2924, 0.9383], [2.5049, 1.8766, 1.7190],
         [2.5655, 0.3918, 2.8893], [2.0991, 0.3420, 2.5053],
         [0.4781, 1.9488, 2.4216], [1.5360, 1.5231, 1.6966],
         [2.4269, 1.0145, 2.5672], [2.4029, 0.8433, 0.7046],
         [2.2463, 1.0870, 1.4092], [2.0045, 0.0555, 0.3586],
         [0.9245, 0.2342, 1.6315], [0.2886, 2.2155, 0.8539],
         [0.3097, 1.5878, 0.7306], [0.3061, 0.1732, 2.5003],
         [1.3429, 2.8093, 0.0616], [0.6755, 0.6979, 1.1869],
         [0.6704, 2.1383, 0.8466], [1.4647, 0.0200, 0.9534]],
        device='cuda:0')
    xyz_batch_cnt = torch.tensor([15, 5]).int().cuda()
    support_features = torch.tensor(
        [[0.6703, 0.0809, 0.6430, 0.9469, 0.6825, 0.0841],
         [0.9026, 0.8720, 0.7196, 0.4655, 0.0622, 0.7599],
         [0.3374, 0.5882, 0.9785, 0.9963, 0.6807, 0.7285],
         [0.0977, 0.8807, 0.1530, 0.2066, 0.7584, 0.7701],
         [0.9749, 0.6993, 0.7294, 0.7440, 0.3246, 0.0513],
         [0.5800, 0.3814, 0.5304, 0.1607, 0.6547, 0.7054],
         [0.7016, 0.0323, 0.6399, 0.5637, 0.8238, 0.6258],
         [0.8006, 0.1034, 0.0442, 0.1530, 0.3551, 0.7910],
         [0.6459, 0.6607, 0.4227, 0.7310, 0.2012, 0.7854],
         [0.1120, 0.3219, 0.7318, 0.4884, 0.5469, 0.7449],
         [0.5899, 0.7488, 0.3354, 0.6374, 0.0289, 0.6962],
         [0.5150, 0.3284, 0.4106, 0.4627, 0.6250, 0.9437],
         [0.6117, 0.3254, 0.2470, 0.5453, 0.7201, 0.9227],
         [0.3639, 0.0239, 0.8215, 0.2537, 0.8672, 0.3411],
         [0.1864, 0.8142, 0.4806, 0.1313, 0.6831, 0.6850],
         [0.2580, 0.4167, 0.3878, 0.6853, 0.3662, 0.0852],
         [0.4661, 0.6738, 0.3977, 0.6563, 0.5957, 0.9425],
         [0.7965, 0.7100, 0.0231, 0.2448, 0.7408, 0.4400],
         [0.1546, 0.7638, 0.8941, 0.3682, 0.2980, 0.4708],
         [0.5786, 0.7752, 0.3181, 0.5317, 0.5880, 0.0728]],
        device='cuda:0')
    new_xyz = torch.tensor(
        [[0.3351, 1.3612, 1.9173], [1.2883, 0.5559, 0.8727],
         [0.2586, 1.9280, 0.0934], [2.3844, 2.0059, 1.4321],
         [0.8922, 0.2015, 0.9411], [2.3348, 0.5755, 1.5951],
         [2.6871, 0.7559, 2.2741], [0.5518, 0.4131, 2.5979],
         [1.7189, 1.1130, 1.8792], [0.9339, 1.9584, 2.3148]],
        device='cuda:0')
    new_xyz_batch_cnt = torch.tensor([5, 5]).int().cuda()
    num_grid_x = 2
    num_grid_y = 2
    num_grid_z = 2
    max_neighbour_distance = 1.8
    num_c_out_each_grid = 1
    use_xyz = 1
    num_mean_points_per_grid = 20
    new_features, new_local_xyz, num_mean_points_per_grid, \
        point_cnt_of_grid = vector_pool_with_voxel_query(
            support_xyz, xyz_batch_cnt, support_features, new_xyz,
            new_xyz_batch_cnt, num_grid_x, num_grid_y, num_grid_z,
            max_neighbour_distance, num_c_out_each_grid, use_xyz,
            num_mean_points_per_grid)
    expected_new_features = torch.tensor(
        [[0.0000, 0.0000, 2.8259, 0.0000, 3.6872, 3.0126, 2.6775, 3.3871],
         [3.7818, 3.8409, 2.8259, 3.2474, 3.2854, 3.0126, 2.9459, 2.8993],
         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 3.3383, 0.0000, 2.8895],
         [3.7093, 2.8774, 0.0000, 3.1077, 2.9459, 3.2790, 0.0000, 0.0000],
         [0.0000, 0.0000, 3.6451, 3.3871, 3.2854, 0.0000, 3.3639, 2.9970],
         [2.8644, 0.0000, 2.9523, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [2.8644, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [2.1992, 0.0000, 0.0000, 0.0000, 2.8644, 0.0000, 2.9523, 0.0000],
         [2.9098, 2.1992, 2.9495, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
         [2.9552, 2.1992, 2.9495, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]],
        device='cuda:0')
    assert torch.allclose(new_features, expected_new_features, 1e-4)
