# Copyright (c) OpenMMLab. All rights reserved.
import pytest
import torch

from mmcv.ops import three_nn_vector_pool_by_two_step
from mmcv.utils import IS_CUDA_AVAILABLE


def get_dense_voxels_by_center(point_centers, max_neighbour_distance,
                               num_voxels):
    """
    Args:
        point_centers: (N, 3)
        max_neighbour_distance: float
        num_voxels: [num_x, num_y, num_z]

    Returns:
        voxel_centers: (N, total_voxels, 3)
    """
    R = max_neighbour_distance
    device = point_centers.device
    x_grids = torch.arange(
        -R + R / num_voxels[0],
        R - R / num_voxels[0] + 1e-5,
        2 * R / num_voxels[0],
        device=device)
    y_grids = torch.arange(
        -R + R / num_voxels[1],
        R - R / num_voxels[1] + 1e-5,
        2 * R / num_voxels[1],
        device=device)
    z_grids = torch.arange(
        -R + R / num_voxels[2],
        R - R / num_voxels[2] + 1e-5,
        2 * R / num_voxels[2],
        device=device)
    x_offset, y_offset, z_offset = torch.meshgrid(
        x_grids, y_grids, z_grids)  # shape: [num_x, num_y, num_z]
    xyz_offset = torch.cat(
        (x_offset.contiguous().view(-1, 1), y_offset.contiguous().view(
            -1, 1), z_offset.contiguous().view(-1, 1)),
        dim=-1)
    voxel_centers = point_centers[:, None, :] + xyz_offset[None, :, :]
    return voxel_centers


@pytest.mark.parametrize('device', [
    pytest.param(
        'cuda',
        marks=pytest.mark.skipif(
            not IS_CUDA_AVAILABLE, reason='requires CUDA support')),
])
def test_three_nn_vector_pool(device):
    xyz = torch.tensor(
        [[0.7911, 4.1821, 18.1309], [9.8552, 19.9272, 7.4532],
         [17.0715, 9.8851, 5.8078], [4.3750, 1.1232, 18.0702],
         [14.0227, 9.5781, 15.7914], [3.0038, 8.7471, 12.6253],
         [17.1353, 13.0427, 13.4723], [1.4284, 12.0409, 16.0280],
         [10.5802, 11.9821, 10.6400], [11.2924, 16.3918, 16.3261],
         [8.6749, 4.3318, 19.6607], [6.7047, 10.6616, 16.7599],
         [15.1153, 1.8694, 16.1620], [4.5372, 2.2882, 12.4915],
         [12.0136, 0.5850, 4.2164], [15.2224, 13.8230, 19.8346],
         [16.7076, 12.8573, 5.8789], [17.8641, 18.0247, 0.7161],
         [12.7604, 10.6771, 19.1813], [10.3219, 10.4839, 14.7624]],
        device=device)
    new_xyz = torch.tensor(
        [[0.1411, 15.6141, 9.3022], [15.6595, 0.9505, 19.3470],
         [8.0824, 10.3586, 17.3501], [7.3926, 9.9670, 6.6586],
         [13.8781, 8.9048, 5.8824], [11.1121, 0.0274, 9.4883],
         [0.4287, 1.5586, 6.9646], [2.7858, 1.8852, 15.0609],
         [6.0411, 2.8716, 18.9102], [9.1480, 10.8151, 17.0509],
         [5.1243, 8.9133, 18.5356], [19.7255, 14.6383, 9.3120]],
        device=device)
    expected_output = torch.tensor(
        [[[8.9668, 9.9123, 8.9668], [5.8039, 6.9644, 5.8039],
          [11.5133, 12.0966, 11.5133], [8.2455, 10.6970, 8.2455],
          [7.2748, 9.2679, 7.2748], [4.5848, 4.6181, 4.5848],
          [10.9016, 10.9635, 10.9016], [7.4585, 9.3244, 7.4585]],
         [[15.0939, 17.9669, 15.0939], [17.0984, 18.8328, 17.0984],
          [12.3685, 14.7086, 12.3685], [14.7482, 15.7545, 14.7482],
          [18.6902, 21.4343, 18.6902], [20.3433, 22.1651, 20.3433],
          [16.5673, 18.7873, 16.5673], [18.4120, 19.6169, 18.4120]],
         [[3.6334, 5.9936, 3.6334], [6.9725, 7.6524, 6.9725],
          [4.4467, 5.3546, 4.4467], [5.6979, 8.6041, 5.6979],
          [7.8712, 9.9901, 7.8712], [10.3592, 10.6063, 10.3592],
          [8.7992, 9.1461, 8.7992], [9.8155, 11.0808, 9.8155]],
         [[8.6804, 13.0858, 8.6804], [4.2508, 9.0162, 4.2508],
          [9.3306, 12.3016, 9.3306], [11.6039, 11.6039, 11.6039],
          [12.4476, 12.4476, 12.4476], [8.2018, 8.2018, 8.2018],
          [12.5967, 12.5967, 12.5967], [8.4263, 8.4263, 8.4263]],
         [[12.9395, 12.9395, 12.9395], [8.5032, 8.5032, 8.5032],
          [12.6873, 12.6873, 12.6873], [8.1143, 8.1143, 8.1143],
          [12.8858, 12.8858, 12.8858], [8.4212, 8.4212, 8.4212],
          [12.6325, 12.6325, 12.6325], [8.0283, 8.0283, 8.0283]],
         [[15.7088, 15.7088, 15.7088], [13.6476, 13.6476, 13.6476],
          [12.4531, 12.4531, 12.4531], [9.7247, 9.7247, 9.7247],
          [14.7927, 14.7927, 14.7927], [12.5823, 12.5823, 12.5823],
          [11.2755, 11.2755, 11.2755], [8.1626, 8.1626, 8.1626]],
         [[22.1453, 22.1453, 22.1453], [20.1414, 20.1414, 20.1414],
          [20.3329, 20.3329, 20.3329], [18.1298, 18.1298, 18.1298],
          [18.9714, 18.9714, 18.9714], [16.5884, 16.5884, 16.5884],
          [9.3774, 13.7203, 13.8864], [5.7959, 9.0028, 9.2854]],
         [[6.9179, 7.2212, 9.6249], [4.3552, 4.7617, 10.7712],
          [5.1734, 5.4860, 7.4278], [0.7898, 5.1267, 7.0813],
          [5.7097, 8.4436, 9.5155], [1.9266, 6.4671, 10.6737],
          [4.9670, 6.3179, 7.0175], [3.3207, 4.4467, 6.9320]],
         [[1.8430, 4.9515, 9.1642], [3.3854, 5.6567, 12.0132],
          [3.4549, 4.4924, 5.2514], [4.4065, 5.3146, 8.8669],
          [4.4036, 8.6555, 10.6368], [5.2398, 9.0773, 12.0225],
          [6.0146, 7.0864, 7.5323], [6.6513, 8.3557, 8.9531]],
         [[4.2699, 6.5834, 7.4548], [7.2911, 7.4260, 7.7916],
          [5.6190, 6.1713, 8.2128], [6.4337, 8.9186, 8.9761],
          [2.9627, 7.3499, 8.7873], [4.5682, 9.4009, 10.3213],
          [4.5445, 5.7129, 9.8524], [5.7222, 8.1848, 10.7472]],
         [[3.6267, 4.1702, 5.6785], [7.5045, 8.6098, 12.7871],
          [1.4901, 4.3573, 11.4361], [5.1277, 8.7020, 12.5351],
          [6.1439, 7.1931, 8.2296], [8.8366, 9.5812, 9.7204],
          [6.1401, 6.2724, 6.7349], [7.8596, 8.4678, 9.8021]],
         [[9.8402, 15.8095, 18.3264], [5.8844, 14.7694, 16.4738],
          [12.0585, 17.5071, 18.9946], [9.1217, 16.5738, 17.2139],
          [12.3116, 20.2601, 22.6166], [9.4538, 19.4592, 21.1432],
          [14.1476, 21.6108, 23.1613], [11.7453, 20.8619, 21.7249]]],
        device='cuda:0')
    xyz_batch_cnt = torch.tensor([8, 12], device=device).int()
    new_xyz_batch_cnt = torch.tensor([4, 8], device=device).int()
    max_neighbour_distance = 4.8
    new_xyz_grid_centers = get_dense_voxels_by_center(new_xyz,
                                                      max_neighbour_distance,
                                                      (2, 2, 2))
    nsample = -1
    neighbor_type = 0
    avg_length_of_neighbor_idxs = 1000
    num_total_grids = 27
    neighbor_distance_multiplier = 2.0
    dist, idx, avg_length = three_nn_vector_pool_by_two_step(
        xyz, xyz_batch_cnt, new_xyz, new_xyz_grid_centers, new_xyz_batch_cnt,
        max_neighbour_distance, nsample, neighbor_type,
        avg_length_of_neighbor_idxs, num_total_grids,
        neighbor_distance_multiplier)
    assert torch.allclose(dist, expected_output, 1e-4)
